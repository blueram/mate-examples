<?xml version="1.0" encoding="utf-8"?>

<VBox xmlns="http://www.adobe.com/2006/mxml" xmlns:view="example.view.*">
	
	<creationComplete>onCreationComplete(event)</creationComplete>

	<Script>
	<![CDATA[
	
	import flash.utils.Dictionary;

	import mx.binding.utils.BindingUtils;
	
	import mx.events.CollectionEvent;
	
	import mx.collections.ICollectionView;
	
	import mx.core.UIComponent;
	import mx.core.Container;
	
	import example.model.Document;
	
	import example.view.model.MainModel;


	/** This is the presentation model object for this view, it is injected by the application controller when view is created. */
	[Bindable]
	public var model : MainModel;
	
	/** This factory is used to create document views, it is injected by the application controller when the view is created. */
	[Bindable]
	public var documentViewFactory : DocumentViewFactory;
	
	
	/**
	 * A dictionary to keep track of which document is displayed in which view.
	 */
	private var documentToView : Dictionary;
	
	
	private function onCreationComplete( event : Event ) : void {
		// we want to be notified when the open documents collection object changes,
		// note that this is not the same as listening for when the collection changes,
		// see openDocumentsChanged for further explanation
		BindingUtils.bindSetter(openDocumentsChanged,   this, ["model", "openDocuments"]);
		
		// we also want to know when the current document changes
		BindingUtils.bindSetter(currentDocumentChanged, this, ["model", "currentDocument"]);
		
		documentToView = new Dictionary();
	}
	
	private function openDocumentsChanged( openDocuments : ICollectionView ) : void {
		// this is run when the openDocuments property on the presentation model changes, which
		// should only be once (but we can't assume that), it is not the same as when the collection
		// changes (e.g. when an item is added or removed from the collection). 
		
		if ( openDocuments != null ) {
			// listen for change events to be able to react to the opening and closing of documents
			// the listener is weakly referenced because we are only notified after the collection object
			// has changed, not before, and so have no possibility of removing the listener cleanly
			openDocuments.addEventListener(CollectionEvent.COLLECTION_CHANGE, onOpenDocumentsChanged, false, 0, true);
		
			syncDocuments();
		}
	}
	
	private function currentDocumentChanged( d : Document ) : void {
		syncDocuments();
	}
	
	private function onOpenDocumentsChanged( event : Event ) : void {
		syncDocuments();
	}
	
	/**
	 * Calls a method by the same name on the presentation model, but also resets the
	 * selected item on the open documents selector.
	 */
	private function openDocument( doc : Document ) : void {
		model.openDocument(doc);
		
		// make sure the documents selector always shows the prompt
		documentsSelector.selectedIndex = -1;
	}
	
	/**
	 * Synchronizes the application state version of which documents are open with this view's state by
	 * removing any document views whose document is no longer open, creates views for open documents
	 * that don't have a view yet, and makes sure that the current document is the selected tab.
	 */
	private function syncDocuments( ) : void {
		removeClosedDocuments();
		createOpenedDocuments();
		selectCurrentDocument();
	}
	
	/**
	 * See syncDocuments.
	 */
	private function removeClosedDocuments( ) : void {
		for ( var doc : * in documentToView ) {
			// for each child in documentToView see if it is in the openDocuments collection
			// if not remove it from both documentToView and documentsContainer
			// (the "doc" variable is untyped because of a bug in the compiler, the variable of
			// a for-in-loop has to be typed as string)
			
			if ( ! model.isOpen(doc) ) {
				var view : Container = documentToView[doc];
				
				documentsContainer.removeChild(view);
				
				delete documentToView[doc];
			}
		}
	}
	
	/**
	 * See syncDocuments.
	 */
	private function createOpenedDocuments( ) : void {
		for each ( var doc : Document in model.openDocuments ) {
			// for each document in openDocuments see if it is in the documentToView dictionary
			// if not create a new view and add it to both documentToView and documentsContainer
			
			if ( documentToView[doc] == null ) {
				var view : Container = documentViewFactory.createDocumentView(doc);
				
				documentsContainer.addChild(view);
				documentsContainer.selectedIndex = documentsContainer.numChildren - 1;
				
				documentToView[doc] = view;
			}
		}
	}
	
	/**
	 * See syncDocuments.
	 */
	private function selectCurrentDocument( ) : void {
		if ( model.currentDocument != null ) {
			var documentView : Container = documentToView[model.currentDocument];
			
			if ( documentView != null ) {
				documentsContainer.selectedChild = documentView;
			}
		}
	}
	
	]]>
	</Script>
	
	<HBox width="100%">
		<ComboBox id="documentsSelector">
			<prompt>Open document</prompt>
			<dataProvider>{model.documents}</dataProvider>
			<labelField>title</labelField>
			<change>openDocument(Document(documentsSelector.selectedItem))</change>
			<enabled>{model.openSelectorEnabled}</enabled>
		</ComboBox>
		
		<Button>
			<label>Delete current document</label>
			<click>model.deleteCurrentDocument()</click>
			<enabled>{model.deleteButtonEnabled}</enabled>
		</Button>

		<Button>
			<label>Close current document</label>
			<click>model.closeCurrentDocument()</click>
			<enabled>{model.closeButtonEnabled}</enabled>
		</Button>
		
		<Spacer width="100%"/>
		
		<!--
		Currently only plain documents are supported, but in the future you will be able
		to choose between plain and rich text documents.
		
		<Button>
			<label>New plain document</label>
			<click>model.newPlainDocument()</click>
		</Button>
		<Button>
			<label>New rich text document</label>
			<click>model.newRichDocument()</click>
		</Button>
		-->
		
		<Button>
			<label>New document</label>
			<click>model.newPlainDocument()</click>
		</Button>
	</HBox>
	
	<TabNavigator id="documentsContainer" width="100%" height="100%"/>
	
</VBox>
